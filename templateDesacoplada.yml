AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Entrega 1.2 Versión Desacoplada Flask + ECS + Fargate

Parameters:
  MyKeyName:
    Description: Nombre del Key Pair para SSH (opcional, solo para EC2 si necesitas bastion)
    Type: AWS::EC2::KeyPair::KeyName
  LatestAmazonLinuxAmi:
    Description: Última AMI Amazon Linux 2023
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'

Resources:

  ######################
  # 1️⃣ VPC y Subredes  #
  ######################
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: AppVPC

  AppSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: AppSubnet

  DBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DBSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  AppSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnet
      RouteTableId: !Ref PublicRouteTable

  ###########################
  # 2️⃣ Security Groups      #
  ###########################
  ECSServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite tráfico interno desde ALB
      VpcId: !Ref MyVPC

  RdsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite tráfico desde ECS
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSServiceSG

  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite tráfico HTTP desde API Gateway
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ###########################
  # 3️⃣ S3 + CloudFront      #
  ###########################
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-frontend"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - DomainName: !GetAtt WebsiteBucket.DomainName
            Id: S3Origin
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  ###########################
  # 4️⃣ ECR                  #
  ###########################
  AppECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: app-repo


  ###########################
  # 5️⃣ ECS Cluster + Fargate #
  ###########################
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"

  ECSServiceTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ###########################
  # 6️⃣ Secrets Manager      #
  ###########################
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}-db-secret"
      Description: "Credenciales de la DB PostgreSQL"
      GenerateSecretString:
        SecretStringTemplate: '{"username":"admin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  ###########################
  # 7️⃣ RDS PostgreSQL       #
  ###########################
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnets para RDS"
      SubnetIds:
        - !Ref DBSubnet
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-subnet"

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: appdb
      Engine: postgres
      MasterUsername: !Join [ "", [ !GetAtt DBSecret.SecretString.username ] ]
      MasterUserPassword: !Join [ "", [ !GetAtt DBSecret.SecretString.password ] ]
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      VPCSecurityGroups:
        - !Ref RdsSG
      DBSubnetGroupName: !Ref RDSSubnetGroup

  ###########################
  # 8️⃣ ALB + Target Group     #
  ###########################
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-alb"
      Subnets:
        - !Ref AppSubnet
      SecurityGroups:
        - !Ref ALBSG
      Scheme: internal
      Type: application

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      Port: 5000
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ###########################
  # 9️⃣ ECS Task Definition   #
  ###########################
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-task"
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSServiceTaskRole.Arn
      ContainerDefinitions:
        - Name: app
          Image: !Sub "${AppECR.RepositoryUri}:latest"
          PortMappings:
            - ContainerPort: 5000
          Environment:
            - Name: DB_SECRET_ARN
              Value: !Ref DBSecret

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: false
          Subnets:
            - !Ref AppSubnet
          SecurityGroups:
            - !Ref ECSServiceSG
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTargetGroup
          ContainerName: app
          ContainerPort: 5000

Outputs:
  CloudFrontURL:
    Description: URL de acceso al Frontend
    Value: !GetAtt CloudFrontDistribution.DomainName

  ECRRepository:
    Description: URI del repositorio ECR
    Value: !GetAtt AppECR.RepositoryUri

  ECSClusterName:
    Description: Nombre del cluster ECS
    Value: !Ref ECSCluster

  DBSecretARN:
    Description: ARN del secreto de la DB
    Value: !Ref DBSecret