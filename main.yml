AWSTemplateFormatVersion: '2010-09-09'
Description: 'Entrega 1 CN con Fargate (Contenedores) usando LabRole'

Parameters:
  VpcId:
    Description: 'La VPC donde se ejecutarán los contenedores. Elige tu VPC por defecto.'
    Type: AWS::EC2::VPC::Id

  SubnetIds:
    Description: 'Elige al menos DOS subredes PÚBLICAS de tu VPC (para el Balanceador).'
    Type: List<AWS::EC2::Subnet::Id>

  ImageUrl:
    Description: 'La URL completa de tu imagen en ECR (ej. 123456.dkr.ecr.region.amazonaws.com/mi-api:latest)'
    Type: String
    
  ContainerPort:
    Description: 'El puerto en el que tu API escucha DENTRO del contenedor (ej. 3000, 5000, 8080)'
    Type: Number
    Default: 80
    
  ExecutionRoleArn:
    Description: 'El ARN completo de tu rol de IAM existente (LabRole)'
    Type: String
    # Ejemplo: arn:aws:iam::111122223333:role/LabRole

Resources:
  # 1. El Cluster de ECS (Agrupador lógico)
  MyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'cluster-api-clase'

  # 2. Grupo de Seguridad para el Balanceador (Abierto al puerto 80)
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Permite tráfico HTTP (puerto 80) desde Internet'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Abierto a todo el mundo

  # 3. Grupo de Seguridad para el Contenedor (Solo abierto al Balanceador)
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Permite tráfico solo desde el Balanceador de Carga'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          # Solo permite tráfico que venga desde el Security Group del Balanceador
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId 

  # 4. El Balanceador de Carga (ALB)
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: 'api-clase-lb'
      Scheme: internet-facing
      Subnets: !Ref SubnetIds # Debe estar en subredes públicas
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  # 5. El "Target Group" (A dónde apunta el ALB)
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: 'tg-api-clase'
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: !Ref ContainerPort # El puerto de tu contenedor
      HealthCheckPath: '/' # AWS comprobará esta ruta (ej. '/') para ver si tu API está viva
      TargetType: ip # Requerido por Fargate

  # 6. El "Listener" (Escucha en puerto 80 y reenvía al Target Group)
  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  # 7. La "Task Definition" (La receta de tu contenedor)
  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 'task-api-clase'
      RequiresCompatibilities: 
        - FARGATE
      NetworkMode: awsvpc # Requerido por Fargate
      Cpu: 256 # 0.25 vCPU
      Memory: 512 # 0.5 GB
      
      # --- ¡AQUÍ ESTÁ EL CAMBIO! ---
      # Usa el ARN del parámetro que le pasamos
      ExecutionRoleArn: !Ref ExecutionRoleArn 
      
      ContainerDefinitions:
        - Name: 'mi-api-container'
          Image: !Ref ImageUrl
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp

  # 8. El Servicio (El director que lanza la tarea)
  MyService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: 'servicio-api-clase'
      Cluster: !Ref MyECSCluster
      TaskDefinition: !Ref MyTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1 # Cuántas copias de tu contenedor quieres
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # Necesario para que Fargate pueda descargar tu imagen de ECR
          Subnets: !Ref SubnetIds
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers: # Conecta el servicio al Balanceador
        - ContainerName: 'mi-api-container'
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref MyTargetGroup
    DependsOn: MyListener # Se asegura de crear el Listener antes que el servicio

Outputs:
  ApiEndpoint:
    Description: 'La URL pública de la API'
    Value: !Join [ '', [ 'http://', !GetAtt MyLoadBalancer.DNSName ] ]