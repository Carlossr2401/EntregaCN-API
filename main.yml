AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Despliegue de una aplicación monolítica Flask en EC2 con RDS
  y API Gateway como proxy para ocultar los endpoints.

Parameters:
  MyKeyName:
    Description: Nombre de tu Key Pair (.pem) existente para acceder por SSH
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Debe ser un Key Pair existente en EC2

  DBUsername:
    Type: String
    Default: admin
    Description: Usuario de la base de datos

  DBPassword:
    Type: String
    NoEcho: true
    Default: MiPass1234
    Description: Contraseña de la base de datos

Resources:
  # --- Security Groups ---
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permitir HTTP (80) y SSH (22)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permitir acceso a RDS desde EC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt EC2SecurityGroup.GroupId

  # --- Base de datos RDS ---
  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: flask-db-instance-2
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: MySQL
      EngineVersion: "8.0"
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      PubliclyAccessible: true
      BackupRetentionPeriod: 1
      DeletionProtection: false

  # --- EC2 Instance ---
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref MyKeyName
      SecurityGroupIds:
        - !GetAtt EC2SecurityGroup.GroupId
      ImageId: ami-0c7217cdde317cfec # Amazon Linux 2023 (us-east-1)
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker git
          systemctl start docker
          systemctl enable docker

          cd /home/ec2-user
          git clone https://github.com/Carlossr2401/entregacn-api.git app
          cd app/app

          # Dockerize la app
          cat > Dockerfile <<EOF
          FROM python:3.11-slim
          WORKDIR /app
          COPY . /app
          RUN pip install --no-cache-dir -r requirements.txt
          EXPOSE 5000
          CMD ["flask", "run", "--host=0.0.0.0", "--port=5000"]
          EOF

          docker build -t flask-app .
          docker run -d -p 80:5000 flask-app

  # --- API Gateway ---
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: FlaskMonolithicAPI
      Description: API Gateway proxy hacia EC2

  ApiGatewayProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref ApiGatewayRestApi

  # --- Proxy ANY para GET/POST/PUT/DELETE ---
  ApiGatewayProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        Uri: !Sub "http://${EC2Instance.PublicDnsName}/"
        PassthroughBehavior: WHEN_NO_MATCH

  # --- Método OPTIONS para CORS ---
  ApiGatewayProxyOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayProxyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # --- Deployment ---
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayProxyMethod
      - ApiGatewayProxyOptions
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod

  # --- Usage Plan y API Key ---
  ApiGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiGatewayDeployment
    Properties:
      UsagePlanName: BasicPlan
      ApiStages:
        - ApiId: !Ref ApiGatewayRestApi
          Stage: prod

  ApiGatewayApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: ApiGatewayUsagePlan
    Properties:
      Name: FlaskMonolithicKey
      Enabled: true
      Value: "MiContrasenaAPIGateway123!"
      StageKeys:
        - RestApiId: !Ref ApiGatewayRestApi
          StageName: prod

  ApiGatewayUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - ApiGatewayApiKey
      - ApiGatewayUsagePlan
    Properties:
      KeyId: !Ref ApiGatewayApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiGatewayUsagePlan

Outputs:
  ApiGatewayURL:
    Description: Endpoint público de API Gateway (proxy hacia EC2)
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"

  EC2PublicDNS:
    Description: DNS público de la instancia EC2
    Value: !GetAtt EC2Instance.PublicDnsName

  DBEndpoint:
    Description: Endpoint de la base de datos RDS
    Value: !GetAtt MyDBInstance.Endpoint.Address
