AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Despliegue de aplicaci√≥n en EC2 con Docker Compose y exposici√≥n v√≠a API Gateway HTTP.

Parameters:
  MyKeyName:
    Description: Nombre de tu Key Pair (.pem) existente para acceder por SSH
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Debe ser el nombre de un Key Pair existente en EC2.

  MyHomeIP:
    Description: Tu IP de casa (para acceso SSH). A√±ade /32 al final.
    Type: String
    Default: '88.24.94.142/32'

  LatestAmiId:
    Description: ID de la AMI de Amazon Linux 2023
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite SSH (desde casa) y HTTP (desde todos)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyHomeIP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref MyKeyName
      ImageId: !Ref LatestAmiId
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: Docker-Compose-Server
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          dnf update -y
          dnf install git wget docker -y
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ec2-user
          mkdir -p /usr/local/lib/docker/cli-plugins
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/lib/docker/cli-plugins/docker-compose
          wget https://github.com/docker/buildx/releases/download/v0.17.1/buildx-v0.17.1.linux-amd64 -O /usr/local/lib/docker/cli-plugins/docker-buildx
          chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
          chmod +x /usr/local/lib/docker/cli-plugins/docker-buildx
          su - ec2-user -c "
            git clone https://github.com/Carlossr2401/entregacn-api.git /home/ec2-user/app
            cd /home/ec2-user/app
            sed -i '/^version:/d' docker-compose.yml
            sed -i 's/\"8080:80\"/\"80:80\"/' docker-compose.yml
            docker compose up --build -d
          "

  # === API Gateway HTTP ===
  MyHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: EC2ProxyAPI
      ProtocolType: HTTP
      CorsConfiguration:
        AllowMethods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
        AllowOrigins: ["*"]
        AllowHeaders: ["*"]

  MyApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MyHttpApi
      IntegrationType: HTTP_PROXY
      IntegrationUri: !Sub "http://${MyEC2Instance.PublicDnsName}"
      IntegrationMethod: ANY          # üëà clave para evitar el error
      PayloadFormatVersion: "1.0"

  MyApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyHttpApi
      RouteKey: "ANY /{proxy+}"
      Target: !Sub "integrations/${MyApiIntegration}"

  MyApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref MyHttpApi
      StageName: prod
      AutoDeploy: true

Outputs:
  PublicIP:
    Description: IP P√∫blica de la instancia
    Value: !GetAtt MyEC2Instance.PublicIp

  PublicURL:
    Description: URL directa (sin API Gateway)
    Value: !Sub "http://${MyEC2Instance.PublicDnsName}"

  ApiGatewayInvokeURL:
    Description: Endpoint p√∫blico del API Gateway
    Value: !Sub "https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
